{
  "GUID": "898ca0",
  "Name": "backgammon_piece_white",
  "Transform": {
    "posX": 0.049041748,
    "posY": 0.986098468,
    "posZ": 9.2064085,
    "rotX": -4.852882e-7,
    "rotY": 359.930054,
    "rotZ": -0.00000247666662,
    "scaleX": 0.389768243,
    "scaleY": 0.2264492,
    "scaleZ": 0.389768243
  },
  "Nickname": "Random Start Game",
  "Description": "",
  "GMNotes": "",
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "ColorDiffuse": {
    "r": 0,
    "g": 1,
    "b": 0.0154893408
  },
  "LayoutGroupSortIndex": 0,
  "Value": 0,
  "Locked": true,
  "Grid": true,
  "Snap": true,
  "IgnoreFoW": false,
  "MeasureMovement": false,
  "DragSelectable": true,
  "Autoraise": true,
  "Sticky": true,
  "Tooltip": true,
  "GridProjection": false,
  "HideWhenFaceDown": false,
  "Hands": false,
  "LuaScript": "function onLoad()\r\n    params = {\r\n        click_function = \"click_func\",\r\n        function_owner = self,\r\n        label          = \"RAW Start\",\r\n        position       = {0, 1, 0},\r\n        rotation       = {0, 180, 0},\r\n        width          = 1400,\r\n        height         = 500,\r\n        font_size      = 200,\r\n        color          = {1.0, 1.0, 1.0},\r\n        font_color     = {0, 0, 0},\r\n        press_color    = {0, 1, 0},\r\n        tooltip        = \"Starts game with random characters and random missions\",\r\n    }\r\n    self.createButton(params)\r\nend\r\n\r\n-- Use Alt-Click to just spawn decks all decks and pieces and let user choose\r\n-- how to setup the game.\r\nfunction click_func(obj, color, alt_click)\r\n    local main_deck, mission_deck, character_deck = spawn_decks(alt_click);\r\n    assign_characters_and_spawn_pieces(main_deck, mission_deck, character_deck); \r\nend\r\n\r\nfunction spawn_decks(is_custom_start)\r\n    -- TODO - make sure you don't clone the main deck, character deck, and mission deck\r\n    local main_deck = create_and_spawn_main_deck();\r\n    local mission_deck, character_deck = spawn_mission_and_character_decks(is_custom_start);\r\n    return main_deck, mission_deck, character_deck;\r\nend\r\n\r\n-- Small todo, make the initial spawning prettier? if based on the donor cards height\r\n-- then this will be handled automatically when I hide the donor decks\r\nfunction create_and_spawn_main_deck()\r\n    local donor_ally_deck_GUID =   'cbbbaa'; --This needs set manually everytime the deck is replaced\r\n    local donor_action_deck_GUID = 'bbdb7c'; --This needs set manually everytime the deck is replaced\r\n    --print(\"Set GUIDS\");\r\n\r\n    local donor_ally_deck   = getObjectFromGUID(donor_ally_deck_GUID);\r\n    local donor_action_deck = getObjectFromGUID(donor_action_deck_GUID);\r\n    --print(\"getObjectFromGUID\");\r\n    \r\n    local main_deck_spawn = {-2.54, 2.00, -0.05};\r\n    --local deck_2_spawn = {-2.54, 4.00, -0.05};\r\n    --print(\"Set Spawn Data\");\r\n\r\n    local action_deck = donor_action_deck.clone();\r\n    action_deck.setLock(false);\r\n    local ally_deck   = donor_ally_deck  .clone();\r\n    ally_deck.setLock(false);\r\n    --print(\"Clone From Donors\");\r\n\r\n    local main_deck   = action_deck.putObject(ally_deck);\r\n    --print(\"Create Main Deck\");\r\n    main_deck.setPosition(main_deck_spawn);\r\n    --print(\"Set Main Deck Position\");\r\n\r\n    shuffle_deck(main_deck);\r\n\r\n    return main_deck;\r\nend\r\n\r\nfunction spawn_mission_and_character_decks(is_custom_start)\r\n    local mission_deck   = getObjectFromGUID(get_mission_deck_GUID());\r\n    local character_deck = getObjectFromGUID(get_character_deck_GUID());\r\n\r\n    if is_custom_start then\r\n        local mission_deck_position   = {-15.26, 1.50,  0.01};\r\n        local character_deck_position = {-21.13, 1.50,  0.05};\r\n\r\n        mission_deck  .setLock(false);\r\n        character_deck.setLock(false);\r\n\r\n        mission_deck  .setPosition(mission_deck_position  );\r\n        character_deck.setPosition(character_deck_position);\r\n    end\r\n\r\n    shuffle_deck(mission_deck);\r\n    shuffle_deck(character_deck);\r\n\r\n    return mission_deck, character_deck;\r\nend\r\n\r\n-- This most certainly is going to need the character deck and mission\r\n-- deck passed into it\r\nfunction assign_characters_and_spawn_pieces(main_deck, mission_deck, character_deck)\r\n    -- Consider renaming the character based keys as just the character name\r\n    -- so you can make a function that just loops through searching for names as keys\r\n    local donor_metal_tokens    = get_objects_from_guids_map(get_donor_metal_token_GUIDS()  );\r\n    local health_trackers       = get_objects_from_guids_map(get_health_tracker_GUIDS()     );\r\n    local starter_decks         = get_objects_from_guids_map(get_starter_deck_GUIDS()       );\r\n    local donor_markers         = get_objects_from_guids_map(get_donor_marker_GUIDS()       );\r\n    local donor_training_track  = getObjectFromGUID(         get_doner_training_track_GUID());\r\n    local global_tags           = Global.getSnapPoints();\r\n    local players               = Player.getPlayers();\r\n\r\n    -- Assign characters to players and put the players in the appropriate seat\r\n    local assigned_characters = assign_and_set_character_cards(character_deck, players);\r\n    local missions_array      = setup_mission_tracks(mission_deck, global_tags);\r\n\r\n    local training_tracks = {};\r\n\r\n    -- Loop through the assign characters and spawn all their pieces in the correct positions\r\n    for name,_ in pairs(assigned_characters) do\r\n        training_tracks[name] = setup_training_track(name, global_tags, donor_training_track, donor_metal_tokens, donor_markers[name]);\r\n        setup_mission_tracker_markers(name, missions_array, donor_markers);\r\n        setup_health_dial_and_starter_deck(name, global_tags, health_trackers, starter_decks);\r\n    end\r\n\r\n    -- Wait for 1 second for cards to settle before locking them in place\r\n    -- Comment this out to see if its necessary with new deck acquiring algo\r\n    Wait.time(function() lock_pieces_that_should_not_move(assigned_characters, training_tracks, missions_array) end, 1);\r\nend\r\n\r\nfunction assign_and_set_character_cards(character_deck, players)\r\n    local assigned_character_cards      = {};\r\n    local character_card                = {};\r\n    local global_tags                   = Global.getSnapPoints();\r\n    local character_card_snap_points    = get_snap_points_with_tag(global_tags, \"Character Card\");\r\n    local character_card_point          = {};\r\n    local character_card_point_position = {};\r\n    local character_card_point_rotation = {};\r\n    local character_card_color_map      = get_character_card_name_to_color_map();\r\n    local last_character_card = nil;\r\n\r\n    for _, current_player in ipairs(players) do\r\n        -- Draw card from character card deck\r\n        if last_character_card == nil then\r\n            character_card      = character_deck.takeObject({position = {0, 0, 0}});\r\n            -- remainder only return a card if it'd be the last card in the deck\r\n            last_character_card = character_deck.remainder;\r\n        else\r\n            character_card = last_character_card;\r\n        end\r\n        -- Get the character card and snap point data\r\n        local card_name      = character_card.getName();\r\n        local character_name = string.sub(card_name, 1, -16); -- Should remove the back 15 characters thus removing \" Character Card\"\r\n        character_card_point = get_snap_points_with_tag(character_card_snap_points, character_name)[1]; -- Indexing 1 because it should just be 1 point\r\n        character_card_point_position = character_card_point.position;\r\n        character_card_point_rotation = character_card_point.rotation;\r\n\r\n        -- Put the character card in game ready state\r\n        character_card.flip();\r\n        character_card.setPosition(character_card_point_position);\r\n        character_card.setRotation(character_card_point_rotation);\r\n\r\n        -- Put the player in the seat that corresponds with the character's color\r\n        print(current_player)\r\n        local character_color = character_card_color_map[card_name];\r\n        print(character_color)\r\n        if Player[character_color].seated == false then\r\n            current_player.changeColor(character_color);\r\n        else\r\n            Player[character_color].changeColor(\"Grey\");\r\n            current_player.changeColor(character_color);\r\n        end\r\n        \r\n        -- Map the character names to the character cards\r\n        assigned_character_cards[character_name] = character_card;\r\n    end\r\n\r\n    return assigned_character_cards\r\nend\r\n\r\nfunction lock_pieces_that_should_not_move(assigned_characters, training_tracks, missions_array) \r\n    for name,_ in pairs(assigned_characters) do\r\n        assigned_characters[name].setLock(true);\r\n        training_tracks[name]    .setLock(true);\r\n    end\r\n\r\n    for i=1,3 do\r\n        missions_array[i].setLock(true); -- Could just explicitly write [1], [2], [3] instead of loop\r\n    end\r\n\r\n    print(\"LLLLLLLLLET'S PLAY!\");\r\nend\r\n\r\n-- If you replace tags on snap points or remove and replace a snap point to move it, it will mess up the\r\n-- spawn of the mission cards because the mission_deck is sitting on a \"mission_tracker\" snap point\r\nfunction setup_mission_tracks(mission_deck, global_tags)\r\n    local mission_snap_points = get_snap_points_with_tag(global_tags, \"Mission Tracker\");\r\n    local missions_array      = {};\r\n    for i=1,3 do\r\n        mission_card = mission_deck.takeObject({position = {0, 0, 0}});\r\n\r\n        mission_card.setPosition(mission_snap_points[i].position);\r\n        mission_card.setRotation(mission_snap_points[i].rotation);\r\n\r\n        missions_array[i] = mission_card;\r\n    end\r\n\r\n    return missions_array;\r\nend\r\n\r\nfunction setup_training_track(character_name, global_tags, donor_training_track, donor_metal_tokens, donor_marker)\r\n    local character_snap_points   = get_snap_points_with_tag(global_tags, character_name);\r\n    local training_track_position = get_snap_points_with_tag(character_snap_points, \"Training Track\")[1].position; -- Should only be 1 snap point at this point\r\n    local training_track_rotation = get_snap_points_with_tag(character_snap_points, \"Training Track\")[1].rotation; -- Should only be 1 snap point at this point\r\n\r\n    local training_track = donor_training_track.clone();\r\n    training_track.setLock(false);\r\n    training_track.setPosition(training_track_position);\r\n    training_track.setRotation(training_track_rotation);\r\n\r\n    set_up_metal_tokens(character_name, training_track, donor_metal_tokens);\r\n    set_up_marker(character_name, training_track, donor_marker);\r\n    \r\n    return training_track;\r\nend\r\n\r\nfunction set_up_metal_tokens(character_name, training_track, donor_metal_tokens)\r\n    local training_track_snap_points = training_track.getSnapPoints();\r\n    local metal_token                = {};\r\n    local metal_token_point          = {};\r\n\r\n    for metal, token in pairs(donor_metal_tokens) do\r\n        metal_token_point    = get_snap_points_with_tag(training_track_snap_points, metal)[1]; -- Indexing here because it should just be one point\r\n        metal_token          = token.clone();\r\n        metal_token.setLock(false);\r\n        -- positionToWorld is important bc the snap point position is relative to the tracker, \r\n        -- vector(0,1,0) is to prevent spawn collision with tracker board\r\n        metal_token.setPosition(training_track.positionToWorld(metal_token_point.position) + vector(0,1,0));\r\n        -- If you don't have an if statement for a side of the board as below, 2 people will end\r\n        -- up with upside down metal tokens\r\n        if character_name == \"Marsh\" or character_name == \"Shan\" then\r\n            metal_token.setRotation(metal_token_point.rotation);\r\n        end\r\n    end\r\nend\r\n\r\nfunction set_up_marker(character_name, training_track, donor_marker)\r\n    local training_track_snap_points = training_track.getSnapPoints();\r\n    local first_marker_snap_point = get_snap_points_with_tag(training_track_snap_points, \"Marker\")[1]; -- pre-index for the first marker position\r\n    local marker                  = donor_marker.clone();\r\n    marker.setLock(false);\r\n    -- positionToWorld is important bc the snap point position is relative to the tracker, \r\n    -- vector(0,1,0) is to prevent spawn collision with tracker board\r\n    marker.setPosition(training_track.positionToWorld(first_marker_snap_point.position) + vector(0,1,0));\r\n    -- Unimportant if that would prevent the marker from spinning when lifted for these 2 characters\r\n    if character_name == \"Kelsier\" or character_name == \"Vin\" then\r\n        marker.setRotation(first_marker_snap_point.rotation + vector(0,180,0));\r\n    else\r\n        marker.setRotation(first_marker_snap_point.rotation);\r\n    end\r\nend\r\n\r\nfunction setup_mission_tracker_markers(character_name, missions_array, donor_markers)\r\n    local mission_card              = {};\r\n    local mission_track_snap_points = {};\r\n    local starting_positions        = {};\r\n    local character_starting_point  = {};\r\n    local position_on_card          = {};\r\n    local rotation                  = {};\r\n    local marker_name               = get_character_marker_name_map()[character_name];\r\n    local markers                   = {\r\n        donor_markers[character_name].clone(),\r\n        donor_markers[character_name].clone(),\r\n        donor_markers[character_name].clone()\r\n    };\r\n\r\n\r\n    for i=1,#missions_array do\r\n        mission_card                     = missions_array[i];\r\n        mission_track_snap_points        = mission_card.getSnapPoints();\r\n        starting_positions               = get_snap_points_with_tag(mission_track_snap_points, \"Starting Position\");\r\n        character_marker_starting_point  = get_snap_points_with_tag(starting_positions, marker_name)[1]; -- Should just be 1 point that has \"Starting Position\" and target character name\r\n        position_on_card                 = mission_card.positionToWorld(character_marker_starting_point.position);\r\n        rotation                         = character_marker_starting_point.rotation\r\n        \r\n        markers[i].setLock(false);\r\n        markers[i].setPosition(position_on_card + vector(0,1,0)); -- +1 in y to avoid spawn collision\r\n        markers[i].setRotation(rotation + vector(0,90,0));        -- +90 degrees because it \"needed\" it\r\n    end\r\nend\r\n\r\nfunction setup_health_dial_and_starter_deck(character_name, global_tags, health_trackers, starter_decks)\r\n    local health_tracker = health_trackers[character_name];\r\n    local starter_deck   = starter_decks[character_name];\r\n\r\n    local health_tracker_snap_points     = get_snap_points_with_tag(global_tags, \"Health Tracker\");\r\n    local character_health_tracker_point = get_snap_points_with_tag(health_tracker_snap_points, character_name)[1]; -- Index 1 because it should be an array with one item\r\n\r\n    local starter_deck_snap_points     = get_snap_points_with_tag(global_tags, \"Starter Deck\");\r\n    local character_starter_deck_point = get_snap_points_with_tag(starter_deck_snap_points, character_name)[1];   -- Index 1 because it should be an array with one item\r\n\r\n    health_tracker.setLock(false);\r\n    health_tracker.setPosition(character_health_tracker_point.position + vector(0, 3, 0)); -- 3 in y because it needs to be on player character card\r\n    health_tracker.setRotation(character_health_tracker_point.rotation);\r\n\r\n    starter_deck.setLock(false);\r\n    starter_deck.setPosition(character_starter_deck_point.position + vector(0, 1, 0));\r\n    starter_deck.setRotation(character_starter_deck_point.rotation);\r\n\r\n    shuffle_deck(starter_deck);\r\nend\r\n\r\n----------------------- REUSABLE HELPER FUNCTIONS -----------------------\r\nfunction TableConcat(t1,t2)\r\n    for i=1,#t2 do\r\n        t1[#t1+i] = t2[i]\r\n    end\r\n    return t1\r\nend\r\n\r\nfunction get_snap_points_with_tag(snap_points, target_tag)\r\n    -- Add all snap points that have the target tag into target_snaps table\r\n    local target_snaps = {};\r\n    for i=1,#snap_points do\r\n        local curr_snap = snap_points[i];\r\n        if search_for_tag(curr_snap.tags, target_tag) then\r\n            target_snaps[#target_snaps + 1] = curr_snap;\r\n        end\r\n    end\r\n\r\n    return target_snaps;\r\nend\r\n\r\nfunction search_for_tag(tags, target_tag)\r\n    for i=1,#tags do\r\n        local curr_tag = tags[i];\r\n        if curr_tag == target_tag then\r\n            return true;\r\n        end\r\n    end\r\n\r\n    return false;\r\nend\r\n\r\nfunction get_objects_from_guids_map(guids_map)\r\n    for key, value in pairs(guids_map) do\r\n        guids_map[key] = getObjectFromGUID(value);\r\n    end\r\n\r\n    return guids_map; -- This is actually a map of name to object, not guid\r\nend\r\n\r\nfunction shuffle_deck(deck)\r\n    deck.randomize();\r\n    deck.randomize();\r\n    deck.randomize();\r\n    deck.randomize();\r\n    deck.randomize();\r\n    deck.randomize();\r\nend\r\n-- ************************** DATA TABLES ************************* --\r\n-- These need set manually everytime the deck or object is replaced\r\n\r\nfunction get_character_deck_GUID()\r\n    return 'de0a91';\r\nend\r\n\r\nfunction get_mission_deck_GUID()\r\n    return '92874a';\r\nend\r\n\r\nfunction get_character_card_name_to_color_map()\r\n    return {\r\n        [\"Vin Character Card\"    ]  = \"Red\",\r\n        [\"Shan Character Card\"   ]  = \"Purple\",\r\n        [\"Kelsier Character Card\"]  = \"Blue\",\r\n        [\"Marsh Character Card\"  ]  = \"Yellow\"\r\n    }\r\nend\r\n\r\nfunction get_donor_metal_token_GUIDS()\r\n    return {\r\n        [\"Pewter Token\"]             = '314dea',\r\n        [\"Tin Token\"   ]             = '66d0e9',\r\n        [\"Bronze Token\"]             = '487fec',\r\n        [\"Copper Token\"]             = 'd47f53',\r\n        [\"Zinc Token\"  ]             = 'b9061b',\r\n        [\"Brass Token\" ]             = '35a8cb',\r\n        [\"Iron Token\"  ]             = 'db01d0',\r\n        [\"Steel Token\" ]             = '4b8cbb'\r\n    }\r\nend\r\n\r\nfunction get_health_tracker_GUIDS()\r\n    return {\r\n        [\"Vin\"     --[[Health Tracker]]]   = 'c7bb7b',\r\n        [\"Shan\"    --[[Health Tracker]]]   = '1bacbb',\r\n        [\"Kelsier\" --[[Health Tracker]]]   = '437522',\r\n        [\"Marsh\"   --[[Health Tracker]]]   = '52e800'\r\n    }\r\nend\r\n\r\nfunction get_starter_deck_GUIDS()\r\n    return {\r\n        [\"Vin\"     --[[Starter Deck]]]     = '013560',\r\n        [\"Shan\"    --[[Starter Deck]]]     = '4fda84',\r\n        [\"Kelsier\" --[[Starter Deck]]]     = '20bf13',\r\n        [\"Marsh\"   --[[Starter Deck]]]     = 'f3b1a6'\r\n    }\r\nend\r\n\r\nfunction get_donor_marker_GUIDS()\r\n    return {\r\n        [\"Vin\"     --[[Marker]]]           = 'a6c65d',\r\n        [\"Shan\"    --[[Marker]]]           = '541161',\r\n        [\"Kelsier\" --[[Marker]]]           = '586779',\r\n        [\"Marsh\"   --[[Marker]]]           = '8e6354'\r\n    }\r\nend\r\n\r\nfunction get_doner_training_track_GUID()\r\n    return 'a5ebe7';\r\nend\r\n\r\nfunction get_character_marker_name_map()\r\n    return {\r\n        [\"Vin\"    ]           = \"Red Marker\",\r\n        [\"Shan\"   ]           = \"Purple Marker\",\r\n        [\"Kelsier\"]           = \"Blue Marker\",\r\n        [\"Marsh\"  ]           = \"Yellow Marker\"\r\n    }\r\nend",
  "LuaScriptState": "",
  "XmlUI": ""
}